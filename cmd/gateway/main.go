// Package gateway is the HTTP gateway for AurChat.
// It spins up a Gin engine, registers all RESTful endpoints under /api/v1,
// and serves Swagger UI for interactive documentation.
package main

import (
	// docs are generated by `swag init`; do NOT remove the blank import.
	_ "github.com/AurChatOrg/aurchat-server/docs"
	"github.com/AurChatOrg/aurchat-server/internal/config"
	"github.com/AurChatOrg/aurchat-server/internal/pkg/logger"
	"github.com/AurChatOrg/aurchat-server/internal/repo"
	"github.com/AurChatOrg/aurchat-server/internal/server"
	"go.uber.org/zap"
)

// @title        AurChat Server
// @version      1.0
// @description  High-performance chat backend written in Go
// @license.name	MIT License
// @BasePath     /api/v1
func main() {
	cfg := config.Load()                  // Read config
	log := logger.New(cfg.App.Env)        // Init Zap
	srv := server.NewHTTPServer(cfg, log) // Create http.Server

	// Init Database
	if err := repo.InitPostgres(cfg); err != nil { // Init Postgres
		log.Fatal("Init postgres", zap.String("error", err.Error()))
	} else {
		log.Info("Init postgres", zap.String("status", "success"))
	}

	log.Info("Starting gateway", zap.String("listen", cfg.HTTP.Listen))
	if err := srv.ListenAndServe(); err != nil {
		log.Fatal("Server stopped", zap.String("error", err.Error()))
	}
}
